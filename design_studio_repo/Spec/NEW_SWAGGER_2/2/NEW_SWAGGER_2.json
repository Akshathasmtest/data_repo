{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "NEW_SWAGGER_2",
    "description" : "NEW_SWAGGER_2",
    "termsOfService" : "http://url.io",
    "version" : "1.0.1"
  },
  "externalDocs" : {
    "url" : ""
  },
  "servers" : [ {
    "url" : "https://qa-dev-ieia.apiwiz.io/data",
    "description" : "wwds",
    "variables" : {
      "var_1" : {
        "description" : "sasdasfs",
        "default" : "123",
        "enum" : [ "enum" ]
      }
    },
    "x-extension" : {
      "x-schema" : "https://qa-dev-ieia.apiwiz.io/data",
      "x-name" : "https://qa-dev-ieia.apiwiz.io/data",
      "x-basePath" : "/"
    }
  } ],
  "tags" : [ {
    "name" : "User_Details_jhdgsfjdgjfhgdhfvhdvfhdvxghvhcxvhxv_fggfgfch",
    "description" : "User_Details_description",
    "externalDocs" : {
      "description" : "Operations related to user management",
      "url" : "https://docs.example.com/user-api"
    }
  } ],
  "paths" : {
    "/users/{userId}" : {
      "summary" : "user_path_summary_svcgvzb cxbs xb zbx bzv xbzb zb xbvzxb zbx sb",
      "description" : "",
      "get" : {
        "tags" : [ "User_Details_jhdgsfjdgjfhgdhfvhdvfhdvxghvhcxvhxv_fggfgfch" ],
        "summary" : "operation_summary",
        "description" : "operation_summary_description",
        "operationId" : "to_get_user_details",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Query_required_Deprecated_string"
        } ],
        "responses" : {
          "200" : {
            "description" : "HERE I AM",
            "headers" : {
              "Required_header_Nullable" : {
                "$ref" : "#/components/headers/Required_header_Nullable"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/user_details"
                },
                "examples" : {
                  "example_1" : {
                    "$ref" : "#/components/examples/example_1"
                  },
                  "example_2" : {
                    "$ref" : "#/components/examples/example_2"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "ok",
            "headers" : {
              "Required_header_Nullable" : {
                "$ref" : "#/components/headers/Required_header_Nullable"
              }
            },
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/user_details"
                },
                "example" : {
                  "$ref" : "#/components/examples/example_external_value_1"
                }
              }
            }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "put" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "put_operation",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : { }
            }
          }
        },
        "responses" : {
          "100" : {
            "description" : "asd",
            "headers" : {
              "Required_header_Nullable" : {
                "$ref" : "#/components/headers/Required_header_Nullable"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/user_details"
                }
              }
            }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "post" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "post_operation",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : { }
            }
          }
        },
        "responses" : {
          "100" : {
            "description" : "sdf",
            "headers" : {
              "Required_header_Nullable" : {
                "$ref" : "#/components/headers/Required_header_Nullable"
              }
            },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "delete" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "delete_operation",
        "parameters" : [ ],
        "responses" : {
          "100" : {
            "description" : "sdf",
            "headers" : {
              "Required_header_Nullable" : {
                "$ref" : "#/components/headers/Required_header_Nullable"
              }
            },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "options" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "option_details",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : { }
            }
          }
        },
        "responses" : {
          "100" : {
            "description" : "sdf",
            "headers" : {
              "Required_header_Nullable" : {
                "$ref" : "#/components/headers/Required_header_Nullable"
              }
            },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "patch" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "patch_operation",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : { }
            }
          }
        },
        "responses" : {
          "100" : {
            "description" : "sdf",
            "headers" : {
              "Required_header_Nullable" : {
                "$ref" : "#/components/headers/Required_header_Nullable"
              }
            },
            "content" : { }
          },
          "101" : {
            "description" : "drtyrt",
            "headers" : { },
            "content" : {
              "application/xml" : {
                "schema" : { }
              }
            }
          },
          "102" : {
            "description" : "rtg",
            "headers" : { },
            "content" : {
              "application/x-yaml" : {
                "schema" : { }
              }
            }
          },
          "201" : {
            "description" : "nvbnv",
            "headers" : { },
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            }
          },
          "202" : {
            "description" : "drfd",
            "headers" : { },
            "content" : {
              "text/csv" : {
                "schema" : { }
              }
            }
          },
          "203" : {
            "description" : "df",
            "headers" : { },
            "content" : {
              "application/atom+xml" : {
                "schema" : { }
              }
            }
          },
          "204" : {
            "description" : "df",
            "headers" : { },
            "content" : {
              "text/rtf" : {
                "schema" : { }
              }
            }
          },
          "207" : {
            "description" : "df",
            "headers" : { },
            "content" : {
              "audio/mp4" : {
                "schema" : { }
              }
            }
          },
          "303" : {
            "description" : "dfvf",
            "headers" : { },
            "content" : {
              "application/vnd.siren+json" : {
                "schema" : { }
              }
            }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "servers" : [ ],
      "parameters" : [ {
        "$ref" : "#/components/parameters/userId"
      }, {
        "$ref" : "#/components/parameters/Parameter_required_query_nullable"
      }, {
        "$ref" : "#/components/parameters/Header_required_header_number_read_only"
      }, {
        "$ref" : "#/components/parameters/parameter_cookie_required"
      }, {
        "$ref" : "#/components/parameters/Allow_reserved_query_read_only"
      }, {
        "$ref" : "#/components/parameters/Allow_reserved_header"
      }, {
        "$ref" : "#/components/parameters/Allow_reserved_cookie"
      }, {
        "$ref" : "#/components/parameters/Allow_Empty_Value_query"
      }, {
        "$ref" : "#/components/parameters/Allow_Empty_Value_header"
      }, {
        "$ref" : "#/components/parameters/Allow_Empty_Value_cookie_bfjxhcbhjvbcjbvchjbvfcnbvnbvbvbc"
      }, {
        "$ref" : "#/components/parameters/Explode_query"
      }, {
        "$ref" : "#/components/parameters/Explode_header"
      }, {
        "$ref" : "#/components/parameters/Explode_cookie"
      }, {
        "$ref" : "#/components/parameters/Deprecated_query"
      }, {
        "$ref" : "#/components/parameters/Deprecated_header"
      }, {
        "$ref" : "#/components/parameters/Deprecated_cookie"
      }, {
        "$ref" : "#/components/parameters/Query_required_Deprecated_string"
      }, {
        "$ref" : "#/components/parameters/QUERY"
      }, {
        "$ref" : "#/components/parameters/parameter"
      }, {
        "$ref" : "#/components/parameters/query"
      }, {
        "$ref" : "#/components/parameters/query_sample_path"
      } ]
    },
    "/details" : {
      "summary" : "ok",
      "description" : "",
      "get" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "get_operation",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "headers" : { },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "put" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "put_operationn",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : { }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ok",
            "headers" : { },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "delete" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "post_operations",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "headers" : { },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "patch" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "cncnh",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : { }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "ok",
            "headers" : { },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "servers" : [ ],
      "parameters" : [ {
        "$ref" : "#/components/parameters/query"
      } ]
    },
    "/data" : {
      "summary" : "get_operation_data",
      "description" : "",
      "get" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "get_operation_data",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "headers" : {
              "Required_header_Nullable" : {
                "$ref" : "#/components/headers/Required_header_Nullable"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/user_details"
                },
                "example" : {
                  "$ref" : "#/components/examples/example_external_value_1"
                }
              }
            }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "servers" : [ ],
      "parameters" : [ ]
    },
    "/verision_2" : {
      "summary" : "vision",
      "description" : "",
      "get" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "get",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "headers" : { },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "servers" : [ ],
      "parameters" : [ {
        "$ref" : "#/components/parameters/Parameter_required_query_nullable"
      }, {
        "$ref" : "#/components/parameters/query"
      } ]
    },
    "/data_3" : {
      "summary" : "",
      "description" : "",
      "get" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "data_get_operation",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "headers" : { },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "servers" : [ ],
      "parameters" : [ ]
    },
    "/data_4" : {
      "summary" : "ok",
      "description" : "",
      "get" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "data_4_get_operation",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "headers" : { },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "servers" : [ ],
      "parameters" : [ ]
    },
    "/data_5" : {
      "summary" : "ok",
      "description" : "",
      "get" : {
        "tags" : [ ],
        "summary" : "",
        "description" : "",
        "operationId" : "data_5_get_operation",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "ok",
            "headers" : { },
            "content" : { }
          }
        },
        "callbacks" : { },
        "deprecated" : false,
        "security" : [ ],
        "servers" : [ ]
      },
      "servers" : [ ],
      "parameters" : [ ]
    }
  },
  "components" : {
    "schemas" : {
      "user_details" : {
        "type" : "object",
        "properties" : {
          "boolean_property" : {
            "type" : "boolean",
            "format" : "",
            "default" : "true"
          }
        }
      }
    },
    "responses" : { },
    "parameters" : {
      "userId" : {
        "name" : "userId",
        "in" : "path",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "Parameter_required_query_nullable" : {
        "name" : "Parameter_required_query_nullable",
        "in" : "query",
        "description" : "We are not able to delete the created example",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "description" : "schema_description_nullable",
          "nullable" : true,
          "readOnly" : false,
          "example" : "123",
          "deprecated" : false,
          "default" : "123",
          "enum" : [ "schema_description_nullable_enum", "123" ]
        },
        "example" : "123"
      },
      "Header_required_header_number_read_only" : {
        "name" : "Header_required_header_number_read_only",
        "in" : "header",
        "description" : "Header_required_header",
        "required" : true,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "number",
          "properties" : { },
          "description" : "schema_Header_required_header_number_readonly",
          "format" : "",
          "nullable" : false,
          "readOnly" : true,
          "example" : 123,
          "deprecated" : false
        }
      },
      "parameter_cookie_required" : {
        "name" : "parameter_cookie_required",
        "in" : "cookie",
        "description" : "parameter_cookie_required",
        "required" : true,
        "deprecated" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Allow_reserved_query_read_only" : {
        "name" : "Allow_reserved_query_read_only",
        "in" : "query",
        "description" : "Allow_reserved_query",
        "required" : false,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : true,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "description" : "Read_only_schema",
          "nullable" : false,
          "readOnly" : true,
          "example" : "12334",
          "deprecated" : false,
          "default" : "123",
          "enum" : [ "read_only", "123" ]
        },
        "example" : "123"
      },
      "Allow_reserved_header" : {
        "name" : "Allow_reserved_header",
        "in" : "header",
        "description" : "Allow_reserved_header",
        "required" : true,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "boolean",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Allow_reserved_cookie" : {
        "name" : "Allow_reserved_cookie",
        "in" : "cookie",
        "description" : "Allow_reserved_cookie",
        "required" : true,
        "deprecated" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Allow_Empty_Value_query" : {
        "name" : "Allow_Empty_Value_query",
        "in" : "query",
        "description" : "Allow_Empty_Value_query",
        "required" : false,
        "deprecated" : false,
        "allowEmptyValue" : true,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Allow_Empty_Value_header" : {
        "name" : "Allow_Empty_Value_header",
        "in" : "header",
        "description" : "Allow_Empty_Value_header",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Allow_Empty_Value_cookie_bfjxhcbhjvbcjbvchjbvfcnbvnbvbvbc" : {
        "name" : "Allow_Empty_Value_cookie_bfjxhcbhjvbcjbvchjbvfcnbvnbvbvbc",
        "in" : "cookie",
        "description" : " Allow_Empty_Value_cookie",
        "required" : false,
        "deprecated" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Explode_query" : {
        "name" : "Explode_query",
        "in" : "query",
        "description" : "Explode_query",
        "required" : false,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : true,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Explode_header" : {
        "name" : "Explode_header",
        "in" : "header",
        "description" : "Explode_header",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : true,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Explode_cookie" : {
        "name" : "Explode_cookie",
        "in" : "cookie",
        "description" : "Explode_cookie",
        "required" : false,
        "deprecated" : false,
        "style" : "form",
        "explode" : true,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Deprecated_query" : {
        "name" : "Deprecated_query",
        "in" : "query",
        "description" : "Deprecated_query",
        "required" : false,
        "deprecated" : true,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Deprecated_header" : {
        "name" : "Deprecated_header",
        "in" : "header",
        "description" : "Deprecated_header",
        "required" : false,
        "deprecated" : true,
        "style" : "simple",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Deprecated_cookie" : {
        "name" : "Deprecated_cookie",
        "in" : "cookie",
        "description" : "Deprecated_cookie",
        "required" : false,
        "deprecated" : true,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "properties" : { },
          "description" : "",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Query_required_Deprecated_string" : {
        "name" : "Query_required_Deprecated_string",
        "in" : "query",
        "description" : "Query_required_Deprecated_string",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "description" : "Query_required_Deprecated_string_descirption",
          "nullable" : false,
          "readOnly" : false,
          "example" : "123",
          "deprecated" : true,
          "default" : "123",
          "enum" : [ "deprecated", "required" ]
        }
      },
      "QUERY" : {
        "name" : "QUERY",
        "in" : "query",
        "description" : "QUERY PARAMETER",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "integer",
          "description" : "SAMPLE",
          "nullable" : true,
          "readOnly" : false,
          "example" : 1,
          "deprecated" : false,
          "enum" : [ null, null, null ]
        },
        "example" : "123"
      },
      "parameter" : {
        "name" : "parameter",
        "in" : "query",
        "description" : "parameter",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "number",
          "description" : "dsf",
          "nullable" : true,
          "readOnly" : false,
          "deprecated" : false,
          "enum" : [ null, null ]
        },
        "example" : "sd"
      },
      "query" : {
        "name" : "query",
        "in" : "query",
        "description" : "sfd",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "integer",
          "description" : "xc",
          "nullable" : false,
          "readOnly" : true,
          "deprecated" : false,
          "enum" : [ 1, 2, 3 ]
        }
      },
      "query_sample_path" : {
        "name" : "query_sample_path",
        "in" : "query",
        "description" : "query_sample_path",
        "required" : false,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Query_required_string_read_only" : {
        "name" : "Query_required_string_read_only",
        "in" : "query",
        "description" : "Query_required_string_read_only",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "description" : "Query_required_string_read_only_decription",
          "nullable" : false,
          "readOnly" : true,
          "example" : "123",
          "deprecated" : false,
          "default" : "123",
          "enum" : [ "string", "required", "readonly" ]
        },
        "example" : "123"
      },
      "Query_required_string_write_only" : {
        "name" : "Query_required_string_write_only",
        "in" : "query",
        "description" : "Query_required_string_write_only",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "description" : "Query_required_string_write_only_description",
          "nullable" : false,
          "readOnly" : false,
          "example" : "123",
          "deprecated" : false,
          "default" : "123",
          "enum" : [ "required", "write_only", "String" ]
        },
        "example" : "123"
      },
      "Query_Required_Number_Nullable" : {
        "name" : "Query_Required_Number_Nullable",
        "in" : "query",
        "description" : "Query_Required_Number_Nullable",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "number",
          "description" : "Query_Required_Number_Nullable",
          "nullable" : true,
          "readOnly" : false,
          "example" : 123,
          "deprecated" : false
        },
        "example" : "123"
      },
      "Query_required_number_readonly" : {
        "name" : "Query_required_number_readonly",
        "in" : "query",
        "description" : "Query_required_number_readonly",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "number",
          "description" : "Query_required_number_readonly_description",
          "nullable" : false,
          "readOnly" : true,
          "example" : 123,
          "deprecated" : false
        },
        "example" : "123"
      },
      "Query_required_number_deprecated" : {
        "name" : "Query_required_number_deprecated",
        "in" : "query",
        "description" : "Query_required_number_deprecated",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "number",
          "description" : "Query_required_number_deprecated",
          "nullable" : false,
          "readOnly" : false,
          "example" : 234,
          "deprecated" : true
        },
        "example" : "123"
      },
      "query_required_number_write_only" : {
        "name" : "query_required_number_write_only",
        "in" : "query",
        "description" : "query_required_number_write_only_description",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "number",
          "description" : "query_required_number_write_only_scehma",
          "nullable" : false,
          "readOnly" : false,
          "example" : 133,
          "deprecated" : false
        },
        "example" : "123"
      },
      "Query_required_integer_deprecated" : {
        "name" : "Query_required_integer_deprecated",
        "in" : "query",
        "description" : "Query_required_integer_deprecated",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "integer",
          "description" : "Query_required_integer_deprecated_schema",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : true
        },
        "example" : "123"
      },
      "Query_required_integer_nulable" : {
        "name" : "Query_required_integer_nulable",
        "in" : "query",
        "description" : "Query_required_integer_nulable",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "integer",
          "description" : "Query_required_integer_nulable_scehma",
          "nullable" : true,
          "readOnly" : false,
          "example" : 123,
          "deprecated" : false
        },
        "example" : "123"
      },
      "Query_required_integr_write_only" : {
        "name" : "Query_required_integr_write_only",
        "in" : "query",
        "description" : "Query_required_integr_write_only",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "integer",
          "description" : "Query_required_integr_write_only_schema",
          "nullable" : false,
          "readOnly" : false,
          "example" : 123,
          "deprecated" : false
        },
        "example" : "123"
      },
      "Query_required_integr_read_only" : {
        "name" : "Query_required_integr_read_only",
        "in" : "query",
        "description" : "Query_required_integr_read_only",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "integer",
          "description" : "Query_required_integr_read_only_schema",
          "nullable" : false,
          "readOnly" : true,
          "example" : 123,
          "deprecated" : false
        }
      },
      "Query_required_boolean_nullable" : {
        "name" : "Query_required_boolean_nullable",
        "in" : "query",
        "description" : "Query_required_boolean_nullable",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "boolean",
          "description" : "Query_required_boolean_nullable_schema",
          "nullable" : true,
          "readOnly" : false,
          "example" : false,
          "deprecated" : false,
          "default" : "false"
        },
        "example" : "123"
      },
      "Query_required_boolean_read_only" : {
        "name" : "Query_required_boolean_read_only",
        "in" : "query",
        "description" : "Query_required_boolean_read_only",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "boolean",
          "description" : "Query_required_boolean_read_only_schema",
          "nullable" : false,
          "readOnly" : true,
          "example" : false,
          "deprecated" : false,
          "default" : "false"
        }
      },
      "Query_required_boolean_deprecate" : {
        "name" : "Query_required_boolean_deprecate",
        "in" : "query",
        "description" : "Query_required_boolean_deprecate",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "boolean",
          "description" : "Query_required_boolean_deprecate_schema",
          "nullable" : false,
          "readOnly" : false,
          "example" : false,
          "deprecated" : true,
          "default" : "false"
        },
        "example" : "123"
      },
      "Query_required_boolean_write_only" : {
        "name" : "Query_required_boolean_write_only",
        "in" : "query",
        "description" : "Query_required_boolean_write_only",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "boolean",
          "description" : "Query_required_boolean_write_only_schema",
          "nullable" : false,
          "readOnly" : false,
          "example" : false,
          "deprecated" : false,
          "default" : "false"
        },
        "example" : "345"
      },
      "query_uiytfdg" : {
        "name" : "query_uiytfdg",
        "in" : "query",
        "description" : "query_uiytfdg",
        "required" : true,
        "deprecated" : false,
        "allowEmptyValue" : false,
        "style" : "form",
        "explode" : false,
        "allowReserved" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "boolean",
          "description" : "xcvc",
          "nullable" : true,
          "readOnly" : false,
          "deprecated" : false
        },
        "example" : "cvb"
      }
    },
    "examples" : {
      "sfs" : {
        "summary" : "sdfsfd",
        "description" : "sdfdx",
        "value" : "{\n    \"userProfile\": {\n        \"summary\": \"Basic user profile information\",\n        \"value\": {\n            \"id\": 101,\n            \"name\": \"Alice Johnson\",\n            \"email\": \"alice.johnson@example.com\",\n            \"created_at\": \"2023-04-10T09:00:00Z\",\n            \"roles\": [\"admin\", \"editor\"]\n        }\n    },\n    \"productInfo\": {\n        \"summary\": \"Information about a product in inventory\",\n        \"value\": {\n            \"product_id\": \"P1001\",\n            \"name\": \"Wireless Keyboard\",\n            \"description\": \"Ergonomic wireless keyboard with rechargeable battery\",\n            \"price\": 49.99,\n            \"in_stock\": true,\n            \"tags\": [\"electronics\", \"peripherals\"]\n        }\n    },\n    \"orderDetails\": {\n        \"summary\": \"Customer order data\",\n        \"value\": {\n            \"order_id\": \"ORD10233\",\n            \"user_id\": 101,\n            \"items\": [\n                {\"product_id\": \"P1001\", \"quantity\": 1, \"price\": 49.99},\n                {\"product_id\": \"P2003\", \"quantity\": 2, \"price\": 19.99}\n            ],\n            \"total\": 89.97,\n            \"order_date\": \"2024-11-20T14:25:00Z\",\n            \"status\": \"shipped\"\n        }\n    },\n    \"sensorReading\": {\n        \"summary\": \"IoT sensor data collected from field devices\",\n        \"value\": {\n            \"sensor_id\": \"SEN902\",\n            \"location\": \"Greenhouse 3A\",\n            \"timestamp\": \"2025-06-30T15:45:00Z\",\n            \"temperature_c\": 27.3,\n            \"humidity_percent\": 64.2,\n            \"battery_level\": 87\n        }\n    },\n    \"bookEntry\": {\n        \"summary\": \"Book catalog record\",\n        \"value\": {\n            \"isbn\": \"978-3-16-148410-0\",\n            \"title\": \"Learning Python\",\n            \"author\": \"Mark Lutz\",\n            \"publisher\": \"O'Reilly Media\",\n            \"published_year\": 2013,\n            \"genres\": [\"Programming\", \"Education\"],\n            \"available_copies\": 12\n        }\n    },\n    \"vehicleTelemetry\": {\n        \"summary\": \"Data collected from a vehicle's onboard system\",\n        \"value\": {\n            \"vehicle_id\": \"VH1287\",\n            \"timestamp\": \"2025-07-02T08:30:00Z\",\n            \"speed_kmh\": 92,\n            \"engine_temp_c\": 88,\n            \"fuel_level_percent\": 45,\n            \"location\": {\n                \"lat\": 34.0522,\n                \"lng\": -118.2437\n            }\n        }\n    },\n    \"userPreferences\": {\n        \"summary\": \"User-specific application preferences\",\n        \"value\": {\n            \"theme\": \"dark\",\n            \"notifications\": {\n                \"email\": true,\n                \"sms\": false,\n                \"push\": true\n            },\n            \"language\": \"en-US\",\n            \"timezone\": \"America/New_York\"\n        }\n    },\n    \"paymentTransaction\": {\n        \"summary\": \"Record of a completed payment\",\n        \"value\": {\n            \"transaction_id\": \"TXN456789\",\n            \"user_id\": 101,\n            \"amount_usd\": 150.75,\n            \"payment_method\": \"credit_card\",\n            \"timestamp\": \"2025-06-15T10:12:00Z\",\n            \"status\": \"completed\"\n        }\n    },\n    \"appLog\": {\n        \"summary\": \"Log entry from application backend\",\n        \"value\": {\n            \"log_id\": \"LOG12345\",\n            \"level\": \"error\",\n            \"timestamp\": \"2025-07-01T17:32:00Z\",\n            \"message\": \"Database connection timeout\",\n            \"source\": \"auth-service\"\n        }\n    },\n    \"weatherForecast\": {\n        \"summary\": \"Daily weather forecast data\",\n        \"value\": {\n            \"date\": \"2025-07-02\",\n            \"location\": \"San Francisco\",\n            \"temperature\": {\n                \"high_c\": 22,\n                \"low_c\": 14\n            },\n            \"conditions\": \"Partly Cloudy\",\n            \"chance_of_rain_percent\": 20\n        }\n    }\n}\n"
      },
      "example_1" : {
        "value" : { }
      },
      "example_2" : {
        "value" : { }
      },
      "example_external_value_1" : {
        "summary" : "example_external_value_summary",
        "description" : "example_external_value_description",
        "externalValue" : "https://example.com/examples/user-example.json"
      },
      "userId" : {
        "summary" : "userid_summary",
        "description" : "example_description",
        "value" : "123"
      }
    },
    "requestBodies" : { },
    "headers" : {
      "Required_header_Nullable" : {
        "description" : "Required_header_Nullable",
        "required" : true,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "integer",
          "properties" : { },
          "description" : "schema_nullable_required_integer_int32",
          "format" : "int32",
          "nullable" : true,
          "readOnly" : false,
          "example" : 123,
          "deprecated" : false,
          "xml" : {
            "name" : "ad",
            "prefix" : "lex",
            "attribute" : true
          }
        },
        "example" : "{\"type\":\"required\"}"
      },
      "Allow_reserved_read_only" : {
        "description" : "Allow_reserved_read_only",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "integer",
          "properties" : { },
          "description" : "schema_read_only_int64",
          "format" : "int64",
          "nullable" : false,
          "readOnly" : true,
          "example" : 123,
          "deprecated" : false,
          "xml" : {
            "name" : "xml",
            "prefix" : "lex",
            "attribute" : true
          }
        },
        "example" : "{\"type\":\"allow_reserved\"}"
      },
      "Header_allow_empty_value" : {
        "description" : "Header_allow_empty_value",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "maximum" : 123,
          "uniqueItems" : false,
          "type" : "number",
          "properties" : { },
          "description" : "schema_deprecated_number_flot",
          "format" : "float",
          "nullable" : false,
          "readOnly" : false,
          "example" : 123,
          "deprecated" : true,
          "xml" : {
            "name" : "xml",
            "prefix" : "lex",
            "attribute" : true
          }
        },
        "example" : "{\"type\":\"allow_empty_value\"}"
      },
      "Header_Explode_write_only" : {
        "description" : "Header_Explode_write_only",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : true,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "properties" : { },
          "description" : "schema_write_only_explode_string_byte",
          "format" : "byte",
          "nullable" : false,
          "readOnly" : false,
          "example" : "",
          "deprecated" : false,
          "xml" : {
            "name" : "xml",
            "prefix" : "lex",
            "attribute" : true
          }
        },
        "example" : "{\"type\":\"explode\"}"
      },
      "Header_deprecated_string_binary" : {
        "description" : "Header_deprecated_string_binary",
        "required" : false,
        "deprecated" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "description" : "Header_deprecated_string_binary_schema",
          "format" : "binary",
          "nullable" : false,
          "readOnly" : false,
          "example" : "MTIz",
          "deprecated" : false,
          "xml" : {
            "name" : "Header_deprecated_string_binary_schema_enum",
            "prefix" : "xml_prexit",
            "attribute" : true
          },
          "default" : "[B@10df661f",
          "enum" : [ "" ]
        },
        "example" : "{\"type\":\"deprecated\"}"
      },
      "Header_multiple_example_straing_date" : {
        "description" : "Header_multiple_example_date",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "properties" : { },
          "description" : "Header_multiple_example_straing_date_schema",
          "format" : "date",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false,
          "xml" : {
            "name" : "Header_multiple_string_example_date_xml",
            "prefix" : "xml_prefix",
            "attribute" : false
          }
        },
        "example" : "{\"type\":\"requied\"}"
      },
      "Header_string_date_time" : {
        "description" : "Header_string_date_time",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "properties" : { },
          "description" : "",
          "format" : "date_time",
          "nullable" : false,
          "readOnly" : false,
          "deprecated" : false
        }
      },
      "Header_straing_date_time" : {
        "description" : "Header_straing_date_time",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "properties" : { },
          "description" : "Header_straing_date_time_schema",
          "format" : "date_time",
          "nullable" : false,
          "readOnly" : false,
          "example" : "12",
          "deprecated" : false,
          "xml" : {
            "name" : "Header_straing_date_time_schema_xml",
            "prefix" : "xml_prefix",
            "attribute" : false
          },
          "default" : "12",
          "enum" : [ "Header_straing_date_time_schema_enum" ]
        }
      },
      "Header_string_password" : {
        "description" : "Header_string_password",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "properties" : { },
          "description" : "Header_string_password_schema",
          "format" : "password",
          "nullable" : false,
          "readOnly" : false,
          "example" : "123",
          "deprecated" : false,
          "default" : "123"
        }
      },
      "header_boolean" : {
        "description" : "header_boolean",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "boolean",
          "properties" : { },
          "description" : "header_boolean_schema",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "example" : false,
          "deprecated" : false,
          "default" : "false"
        }
      },
      "header_schema_array" : {
        "description" : "header_schema_array",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "maxLength" : 20,
          "minLength" : 10,
          "uniqueItems" : false,
          "type" : "array",
          "properties" : { },
          "description" : "header_schema_array",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "example" : "123",
          "deprecated" : false
        }
      },
      "Header_media" : {
        "description" : "Header_media",
        "required" : false,
        "deprecated" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "uniqueItems" : false,
          "type" : "string",
          "properties" : { },
          "description" : "Header_media_schema",
          "format" : "",
          "nullable" : false,
          "readOnly" : false,
          "example" : "123",
          "deprecated" : false,
          "default" : "123"
        }
      }
    },
    "securitySchemes" : {
      "Api_key_query_security_1" : {
        "type" : "apiKey",
        "description" : "Api_key_query_security_1",
        "name" : "Api_key_query_security_par",
        "in" : "QUERY"
      },
      "Api_key_header_security_1" : {
        "type" : "apiKey",
        "description" : "Api_key_header_security_par",
        "name" : "Api_key_header_security_par",
        "in" : "HEADER"
      },
      "Api_key_Cookie_security_par" : {
        "type" : "apiKey",
        "description" : "Api_key_Cookie_security_par",
        "name" : "Par_Api_key_Cookie_security",
        "in" : "COOKIE"
      },
      "Http_Bearer_jwt" : {
        "type" : "http",
        "description" : "Http_Bearer_jwt",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      },
      "Oauth_2" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "https://test1-kong-apiproxy.apiwiz.io/oauth2/token",
            "scopes" : {
              "grant_type" : "client_credentials",
              "uytu" : "bvbfcnv"
            }
          },
          "password" : {
            "tokenUrl" : "https://test1-kong-apiproxy.apiwiz.io/oauth2/token",
            "scopes" : {
              "bvcb" : "hghm"
            }
          },
          "clientCredentials" : {
            "tokenUrl" : "https://test1-kong-apiproxy.apiwiz.io/oauth2/token",
            "scopes" : {
              "bvcb" : "hgtkfuj"
            }
          },
          "authorizationCode" : {
            "authorizationUrl" : "https://test1-kong-apiproxy.apiwiz.io/oauth2/token",
            "tokenUrl" : "https://test1-kong-apiproxy.apiwiz.io/oauth2/token",
            "scopes" : {
              "xfh" : "cfghc"
            }
          }
        }
      },
      "sasertdyuiytfdrseawaESRDTYUDSAqwaertyrewq" : {
        "type" : "openIdConnect",
        "description" : "wsds",
        "openIdConnectUrl" : "http://openid.com"
      }
    },
    "links" : {
      "new_link_1" : {
        "operationId" : "to_get_user_details",
        "parameters" : {
          "par_1" : "$request.header.pointer"
        },
        "requestBody" : "$request.body{   \"username\": \"john_doe\",   \"email\": \"john@example.com\",   \"age\": 30 }",
        "description" : "sdfdg"
      }
    },
    "callbacks" : { }
  }
}